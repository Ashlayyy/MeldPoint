import{G as N,a as T,U as B}from"./github-CLxWdIIs.js";import{g as F,cw as G,W as i,a9 as R,X as A,N as m,d as n,a as l,O as M,P as H,bo as y,b3 as $,w as o,ag as z,cn as E,o as v,t as u,bp as J,f as g,z as L,e as d,an as w,J as I,_ as O}from"./index-5wn-0GR-.js";const W={class:"issues-panel"},X={class:"header"},j={class:"stats"},q={class:"label"},K={class:"count"},Q={class:"filters"},Y=F({__name:"IssuesPanel",setup(Z){const f=G(),V=i([]),_=i(0),p=i(!0),k=i([]),b=i([]),s=i({state:"all",priority:void 0,type:void 0,search:"",page:1,limit:10}),h=[{title:"Number",key:"number"},{title:"Title",key:"title"},{title:"State",key:"state"},{title:"Priority",key:"priority"},{title:"Type",key:"type"},{title:"Created By",key:"userName"},{title:"Created At",key:"createdAt"},{title:"Actions",key:"actions"}],r=async()=>{p.value=!0;try{const t=await N(s.value);V.value=t.issues,_.value=t.total}catch(t){console.error("Failed to load issues:",t)}finally{p.value=!1}},c=async()=>{try{k.value=await T()}catch(t){console.error("Failed to load issue stats:",t)}},C=t=>{s.value.page=t},S=t=>{t[0]&&t[1]&&(s.value.startDate=t[0],s.value.endDate=t[1])},P=async t=>{try{await B(t.id,t.state==="open"?"closed":"open"),await r(),await c()}catch(a){console.error("Failed to update issue status:",a)}},U=t=>{switch(t){case"high":return"red";case"medium":return"orange";case"low":return"green";default:return"grey"}},D=t=>{window.open(t,"_blank")};return R(s,()=>{r()},{deep:!0}),A(()=>{r(),c(),f.on("issue:created",()=>{r(),c()}),f.on("issue:updated",()=>{r(),c()})}),(t,a)=>(v(),m("div",W,[n("div",X,[a[5]||(a[5]=n("h2",null,"GitHub Issues Management",-1)),n("div",j,[(v(!0),m(M,null,H(k.value,e=>(v(),m("div",{key:e.state,class:"stat-item"},[n("span",q,u(e.state),1),n("span",K,u(e._count),1)]))),128))])]),n("div",Q,[l(y,{modelValue:s.value.state,"onUpdate:modelValue":a[0]||(a[0]=e=>s.value.state=e),items:["all","open","closed"],label:"Status",class:"filter-item"},null,8,["modelValue"]),l(y,{modelValue:s.value.priority,"onUpdate:modelValue":a[1]||(a[1]=e=>s.value.priority=e),items:["high","medium","low"],label:"Priority",clearable:"",class:"filter-item"},null,8,["modelValue"]),l(y,{modelValue:s.value.type,"onUpdate:modelValue":a[2]||(a[2]=e=>s.value.type=e),items:["bug","feature","documentation"],label:"Type",clearable:"",class:"filter-item"},null,8,["modelValue"]),l($,{modelValue:s.value.search,"onUpdate:modelValue":a[3]||(a[3]=e=>s.value.search=e),label:"Search","prepend-inner-icon":"mdi-magnify",class:"filter-item"},null,8,["modelValue"]),l(z,null,{activator:o(({props:e})=>[l(g,L(e,{class:"filter-item"}),{default:o(()=>a[6]||(a[6]=[d(" Date Range ")])),_:2,__:[6]},1040)]),default:o(()=>[l(J,{modelValue:b.value,"onUpdate:modelValue":[a[4]||(a[4]=e=>b.value=e),S],range:""},null,8,["modelValue"])]),_:1})]),l(E,{headers:h,items:V.value,loading:p.value,"items-per-page":s.value.limit,page:s.value.page,total:_.value,"onUpdate:page":C},{"item.state":o(({item:e})=>[l(I,{color:e.state==="open"?"green":"grey",small:""},{default:o(()=>[d(u(e.state),1)]),_:2},1032,["color"])]),"item.priority":o(({item:e})=>[l(I,{color:U(e.priority),small:""},{default:o(()=>[d(u(e.priority||"none"),1)]),_:2},1032,["color"])]),"item.actions":o(({item:e})=>[l(g,{icon:"",small:"",onClick:x=>P(e),title:e.state==="open"?"Close Issue":"Reopen Issue"},{default:o(()=>[l(w,null,{default:o(()=>[d(u(e.state==="open"?"mdi-close-circle":"mdi-refresh"),1)]),_:2},1024)]),_:2},1032,["onClick","title"]),l(g,{icon:"",small:"",onClick:x=>D(e.url),title:"View on GitHub"},{default:o(()=>[l(w,null,{default:o(()=>a[7]||(a[7]=[d("mdi-github")])),_:1,__:[7]})]),_:2},1032,["onClick"])]),_:1},8,["items","loading","items-per-page","page","total"])]))}}),ae=O(Y,[["__scopeId","data-v-128a4604"]]);export{ae as default};
