import{g as C,aZ as k,a1 as h,W as V,X as B,c as m,w as l,b1 as O,o as f,a as s,b as R,ba as J,aR as P,e as w,aS as q,b2 as j,ac as A,d as F,E as g,a4 as M,bo as x,b3 as b,aW as _,aX as y,u as L,b4 as W,f as X,t as E,V as G,aY as S}from"./index-5wn-0GR-.js";import{u as Y}from"./user_store-CU4ETWmY.js";const Z={class:"d-flex align-center mb-4"},K=C({__name:"NotificationTester",setup($){const o=k(),c=h(),U=Y(),v=V(!1),i=V(!1),e=V({type:"system",message:"",todoItem:"",target:"broadcast",selectedUsers:[],jsonData:"",url:""});B(async()=>{await U.fetchUsers({limit:2e4})});const D=n=>{if(n)try{return JSON.parse(n)}catch(a){throw o.error({message:"Invalid JSON data"}),a}},I=async()=>{var n,a,t,N,T;try{if(e.value.target==="self"&&!((n=c.user)!=null&&n.id)){o.error({message:"User ID not available. Please ensure you are logged in."});return}v.value=!0;let u;try{u=D(e.value.jsonData)}catch{return}if(i.value){const r=e.value.target==="self"?[(a=c.user)==null?void 0:a.id]:e.value.selectedUsers;if(!r||r.length===0){o.error({message:"No users selected for notification"});return}const p=r.map(d=>d?S.post("/notifications/test/todo",{type:e.value.type,message:e.value.message,todoItem:e.value.todoItem,userId:d,url:e.value.url,data:u}):(console.warn("Skipping notification for undefined user ID"),Promise.resolve()));await Promise.all(p),o.info({message:"Todo notifications sent successfully to selected users"})}else if(e.value.target==="broadcast")(await S.post("/notifications/test/broadcast",{type:e.value.type,message:e.value.message,data:u,url:e.value.url})).data.success&&o.info({message:"Broadcast notification sent successfully"});else{const r=e.value.target==="self"?[(t=c.user)==null?void 0:t.id]:e.value.selectedUsers;if(!r||r.length===0){o.error({message:"No users selected for notification"});return}const p=r.map(d=>d?S.post("/notifications/test",{type:e.value.type,message:e.value.message,userId:d,data:u,url:e.value.url}):(console.warn("Skipping notification for undefined user ID"),Promise.resolve()));await Promise.all(p),o.info({message:"Notifications sent successfully to selected users"})}}catch(u){o.error({message:`Failed to send notification: ${((T=(N=u.response)==null?void 0:N.data)==null?void 0:T.error)||u.message}`})}finally{v.value=!1}};return(n,a)=>(f(),m(O,null,{default:l(()=>[s(G,null,{default:l(()=>[s(R,{cols:"12"},{default:l(()=>[s(J,null,{default:l(()=>[s(P,{class:"text-h5"},{default:l(()=>a[8]||(a[8]=[w("Notification Tester")])),_:1,__:[8]}),s(q,null,{default:l(()=>[s(j,{onSubmit:A(I,["prevent"])},{default:l(()=>[F("div",Z,[s(M,{modelValue:i.value,"onUpdate:modelValue":a[0]||(a[0]=t=>i.value=t),label:i.value?"Todo Notification":"Standard Notification","hide-details":"",color:"primary",class:"mb-0"},null,8,["modelValue","label"])]),s(x,{modelValue:e.value.type,"onUpdate:modelValue":a[1]||(a[1]=t=>e.value.type=t),items:["system","toast"],label:"Notification Type",rounded:"none",required:""},null,8,["modelValue"]),s(b,{modelValue:e.value.message,"onUpdate:modelValue":a[2]||(a[2]=t=>e.value.message=t),label:"Message",rounded:"none",required:""},null,8,["modelValue"]),s(b,{modelValue:e.value.url,"onUpdate:modelValue":a[3]||(a[3]=t=>e.value.url=t),label:"URL (Optional)",rounded:"none",hint:"The URL to navigate to when clicking the notification"},null,8,["modelValue"]),i.value?(f(),m(b,{key:0,modelValue:e.value.todoItem,"onUpdate:modelValue":a[4]||(a[4]=t=>e.value.todoItem=t),label:"Todo Item Text",rounded:"none",required:""},null,8,["modelValue"])):g("",!0),s(_,{modelValue:e.value.target,"onUpdate:modelValue":a[5]||(a[5]=t=>e.value.target=t),label:"Target",class:"mb-4"},{default:l(()=>[i.value?g("",!0):(f(),m(y,{key:0,label:"Broadcast (All Users)",value:"broadcast"})),s(y,{label:"Specific Users",value:"users"}),s(y,{label:"Current User",value:"self"})]),_:1},8,["modelValue"]),e.value.target==="users"?(f(),m(x,{key:1,modelValue:e.value.selectedUsers,"onUpdate:modelValue":a[6]||(a[6]=t=>e.value.selectedUsers=t),items:L(U).users,"item-title":"Name","item-value":"id",label:"Select Users",multiple:"",chips:"","closable-chips":"",required:""},null,8,["modelValue","items"])):g("",!0),s(W,{modelValue:e.value.jsonData,"onUpdate:modelValue":a[7]||(a[7]=t=>e.value.jsonData=t),label:"Additional Data (JSON)",hint:"Optional JSON data to include with notification"},null,8,["modelValue"]),s(X,{type:"submit",color:"primary",loading:v.value,class:"mt-4"},{default:l(()=>[w(" Send "+E(i.value?"Todo":"Standard")+" Notification ",1)]),_:1},8,["loading"])]),_:1})]),_:1})]),_:1})]),_:1})]),_:1})]),_:1}))}});export{K as default};
