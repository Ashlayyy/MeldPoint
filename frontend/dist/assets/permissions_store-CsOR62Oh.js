import{aY as o,bt as t,br as c,bq as d,aZ as f}from"./index-5wn-0GR-.js";async function l(e){const r=e?`?${new URLSearchParams(e).toString()}`:"",s=`permissions-list${r}`,u=t.get(s);if(u)return{status:200,data:u};const n=await o.get(`undefined/permissions/permissions${r}`);return t.set(s,n.data.data,{ttl:5*60*1e3}),{status:n.status,data:n.data.data}}async function h(e){const r=e?`?${new URLSearchParams(e).toString()}`:"",s=`groups-list${r}`,u=t.get(s);if(u)return{status:200,data:u};const n=await o.get(`undefined/permissions/groups${r}`);return t.set(s,n.data.data,{ttl:5*60*1e3}),{status:n.status,data:n.data.data}}async function w(e){const r=e?`?${new URLSearchParams(e).toString()}`:"",s=`roles-list${r}`,u=t.get(s);if(u)return{status:200,data:u};const n=await o.get(`undefined/permissions/roles${r}`);return t.set(s,n.data.data,{ttl:5*60*1e3}),{status:n.status,data:n.data.data}}async function p(e){if(!e)throw new Error("Data is required");const r=await o.post("undefined/permissions/permission",e);return t.clear(),{status:r.status,data:r.data.data}}async function g(e){if(!e)throw new Error("Data is required");const r=await o.post("undefined/permissions/group",e);return t.clear(),{status:r.status,data:r.data.data}}async function y(e){if(!e)throw new Error("Data is required");const r=await o.post("undefined/permissions/role",e);return t.clear(),{status:r.status,data:r.data.data}}async function m(e,r){if(!e||!r)throw new Error("ID and data are required");const s=await o.patch(`undefined/permissions/permission/${e}`,r);return t.clear(),{status:s.status,data:s.data.data}}async function $(e,r){if(!e||!r)throw new Error("ID and data are required");const s=await o.patch(`undefined/permissions/group/${e}`,r);return t.clear(),{status:s.status,data:s.data.data}}async function L(e,r){if(!e||!r)throw new Error("ID and data are required");const s=await o.patch(`undefined/permissions/role/${e}`,r);return t.clear(),{status:s.status,data:s.data.data}}async function R(e){if(!e)throw new Error("ID is required");const r=await o.delete(`undefined/permissions/permission/${e}`);return t.clear(),{status:r.status,data:r.data.data}}async function E(e){if(!e)throw new Error("ID is required");const r=await o.delete(`undefined/permissions/group/${e}`);return t.clear(),{status:r.status,data:r.data.data}}async function D(e){if(!e)throw new Error("ID is required");const r=await o.delete(`undefined/permissions/role/${e}`);return t.clear(),{status:r.status,data:r.data.data}}async function v(e,r){if(!e||!r)throw new Error("User ID and Permission ID are required");const s=await o.post(`undefined/permissions/assign/user/${e}/permission/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function G(e,r){if(!e||!r)throw new Error("Role ID and Permission ID are required");const s=await o.post(`undefined/permissions/assign/role/${e}/permission/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function S(e,r){if(!e||!r)throw new Error("Group ID and Permission ID are required");const s=await o.post(`undefined/permissions/assign/group/${e}/permission/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function q(e,r){if(!e||!r)throw new Error("User ID and Permission ID are required");const s=await o.delete(`undefined/permissions/remove/user/${e}/permission/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function N(e,r){if(!e||!r)throw new Error("Role ID and Permission ID are required");const s=await o.delete(`undefined/permissions/remove/role/${e}/permission/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function P(e,r){if(!e||!r)throw new Error("Group ID and Permission ID are required");const s=await o.delete(`undefined/permissions/remove/group/${e}/permission/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function J(e,r){if(!e||!r)throw new Error("User ID and Role ID are required");const s=await o.post(`undefined/permissions/assign/user/${e}/role/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function O(e,r){if(!e||!r)throw new Error("User ID and Group ID are required");const s=await o.post(`undefined/permissions/assign/user/${e}/group/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function U(e,r){if(!e||!r)throw new Error("Role ID and Group ID are required");const s=await o.post(`undefined/permissions/assign/role/${e}/group/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function _(e,r){if(!e||!r)throw new Error("User ID and Role ID are required");const s=await o.delete(`undefined/permissions/remove/user/${e}/role/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function F(e,r){if(!e||!r)throw new Error("User ID and Group ID are required");const s=await o.delete(`undefined/permissions/remove/user/${e}/group/${r}`);return t.clear(),{status:s.status,data:s.data.data}}async function T(e,r){if(!e||!r)throw new Error("Role ID and Group ID are required");const s=await o.delete(`undefined/permissions/remove/role/${e}/group/${r}`);return t.clear(),{status:s.status,data:s.data.data}}const a=d.global.t,i=f(),I=c("permissions",{state:()=>({permissions:[],groups:[],roles:[],currentPermission:null,currentGroup:null,currentRole:null,isLoading:!1,error:null}),actions:{async fetchPermissions(e){this.isLoading=!0;try{const r=await l(e);if(r.status===200)this.permissions=r.data||[];else throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.fetch_error",{error:r})})}finally{this.isLoading=!1}},async fetchGroups(e){this.isLoading=!0;try{const r=await h(e);if(r.status===200)this.groups=r.data||[];else throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.fetch_error",{error:r})})}finally{this.isLoading=!1}},async fetchRoles(e){this.isLoading=!0;try{const r=await w(e);if(r.status===200)this.roles=r.data||[];else throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.fetch_error",{error:r})})}finally{this.isLoading=!1}},async createPermission(e){this.isLoading=!0;try{const r=await p(e);if(r.status===201)return await this.fetchPermissions(),r.data;throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.save_error",{error:r})})}finally{this.isLoading=!1}},async createGroup(e){this.isLoading=!0;try{const r=await g(e);if(r.status===201)return await this.fetchGroups(),r.data;throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.save_error",{error:r})})}finally{this.isLoading=!1}},async createRole(e){this.isLoading=!0;try{const r=await y(e);if(r.status===201)return await this.fetchRoles(),r.data;throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.save_error",{error:r})})}finally{this.isLoading=!1}},async updatePermission(e,r){this.isLoading=!0;try{const s=await m(e,r);if(s.status===200)return await this.fetchPermissions(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async updateGroup(e,r){this.isLoading=!0;try{const s=await $(e,r);if(s.status===200)return await this.fetchGroups(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async updateRole(e,r){this.isLoading=!0;try{const s=await L(e,r);if(s.status===200)return await this.fetchRoles(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async deletePermission(e){this.isLoading=!0;try{const r=await R(e);if(r.status===200)return await this.fetchPermissions(),r.data;throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.delete_error",{error:r})})}finally{this.isLoading=!1}},async deleteGroup(e){this.isLoading=!0;try{const r=await E(e);if(r.status===200)return await this.fetchGroups(),r.data;throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.delete_error",{error:r})})}finally{this.isLoading=!1}},async deleteRole(e){this.isLoading=!0;try{const r=await D(e);if(r.status===200)return await this.fetchRoles(),r.data;throw new Error(JSON.stringify(r))}catch(r){i.error({message:a("errors.delete_error",{error:r})})}finally{this.isLoading=!1}},async assignToUser(e,r){this.isLoading=!0;try{const s=await v(e,r);if(s.status===200)return await this.fetchPermissions(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async assignToRole(e,r){this.isLoading=!0;try{const s=await G(e,r);if(s.status===200)return await this.fetchRoles(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async assignToGroup(e,r){this.isLoading=!0;try{const s=await S(e,r);if(s.status===200)return await this.fetchGroups(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async assignRoleToUser(e,r){this.isLoading=!0;try{const s=await J(r,e);if(s.status===200)return await this.fetchRoles(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async assignGroupToUser(e,r){this.isLoading=!0;try{const s=await O(r,e);if(s.status===200)return await this.fetchGroups(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async assignGroupToRole(e,r){this.isLoading=!0;try{const s=await U(r,e);if(s.status===200)return await this.fetchRoles(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async removeFromUser(e,r){this.isLoading=!0;try{const s=await q(e,r);if(s.status===200)return await this.fetchPermissions(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async removeFromRole(e,r){this.isLoading=!0;try{const s=await N(r,e);if(s.status===200)return await this.fetchRoles(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async removeFromGroup(e,r){this.isLoading=!0;try{const s=await P(e,r);if(s.status===200)return await this.fetchGroups(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async removeRoleFromUser(e,r){this.isLoading=!0;try{const s=await _(r,e);if(s.status===200)return await this.fetchRoles(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async removeGroupFromUser(e,r){this.isLoading=!0;try{const s=await F(r,e);if(s.status===200)return await this.fetchGroups(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}},async removeGroupFromRole(e,r){this.isLoading=!0;try{const s=await T(r,e);if(s.status===200)return await this.fetchRoles(),s.data;throw new Error(JSON.stringify(s))}catch(s){i.error({message:a("errors.save_error",{error:s})})}finally{this.isLoading=!1}}},getters:{getPermissionById:e=>r=>e.permissions.find(s=>s.id===r),getGroupById:e=>r=>e.groups.find(s=>s.id===r),getRoleById:e=>r=>e.roles.find(s=>s.id===r)}});export{I as u};
