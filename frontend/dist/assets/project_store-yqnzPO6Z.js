import{bt as l,aY as d,br as f,bw as p,bx as j,bq as g,aZ as y}from"./index-5wn-0GR-.js";async function h(){const e="projects",r=l.get(e);if(r)return{status:200,data:r};const t=await d.get("undefined/project");return l.set(e,t.data.data,{ttl:2*60*1e3}),{status:t.status,data:t.data.data}}async function w(e){if(!e)throw new Error("ID is required");const r=`project-${e}`,t=l.get(r);if(t)return{status:200,data:t};const a=await d.get(`undefined/project/${e}`);return l.set(r,a.data.data,{ttl:5*60*1e3}),{status:a.status,data:a.data.data}}async function P(e){if(!e.NumberID)throw new Error("NumberID is required");e.ProjectNaam||(e.ProjectNaam=`Temp - ${Math.random().toString(36).slice(2)}`);const r=await d.post("undefined/project",e);return l.clear(),{status:r.status,data:r.data.data}}async function m(e,r){if(!e)throw new Error("ID is required");if(!r)throw new Error("Data is required");const t=await d.patch(`undefined/project/${e}`,r);return{status:t.status,data:t.data.data}}async function $(e){if(!e)throw new Error("ID is required");const r=await d.delete(`undefined/project/${e}`);return l.clear(),{status:r.status,data:r.data.data}}async function q(e,r){if(!e||!r)throw new Error("ProjectId and Deelorder are required");const t=await d.post(`undefined/project/${e}/deelorder`,{deelorder:r});return l.remove(`project-${e}`),{status:t.status,data:t.data.data}}async function x(e,r){if(!e)throw new Error("Project ID is required");if(!r)throw new Error("Deelorder ID is required");const t=await d.delete(`undefined/project/${e}/deelorder/${r}`);return{status:t.status,data:t.data.data}}const n=g.global.t,c=y(),s=j(),o="🏗️ [ProjectStore]",i={request:"color: #2196F3",cache:"color: #4CAF50",error:"color: #F44336",info:"color: #9C27B0"},C=f("project",{state:()=>({projects:[],currentProject:null,loading:{single:!1,all:!1},initialized:!1,projectCache:new Map,initializationPromise:null}),getters:{getProjectById:e=>r=>{if(e.projectCache.has(r))return e.projectCache.get(r);const t=e.projects.find(a=>a.id===r);return t&&e.projectCache.set(r,t),t},getProjectByNumberID:e=>r=>e.projects.find(t=>t.projectnummer===r)},actions:{async initialize(){if(!this.initialized)return this.initializationPromise?this.initializationPromise:(this.initializationPromise=s.executeRequest("project","initialization",async()=>{this.loading.all=!0;try{const e=await h();e.status===200&&(this.projects=e.data),this.initialized=!0}catch(e){throw console.error(`${o} %c Initialization failed`,i.error,e),e}finally{this.initializationPromise=null,this.loading.all=!1}}),this.initializationPromise)},refreshData:p.debounce(async function(){return this.initialized?s.executeRequest("project","refresh",async()=>{const e=await h();e.status===200&&(this.projects=e.data)}):this.initialize()},1e3),async fetchProjects(){return this.initialized?s.executeRequest("project","fetchProjects",async()=>{this.loading.all=!0;try{const e=await h();if(e.status===200)this.projects=e.data;else throw new Error(JSON.stringify(e))}catch(e){console.error(`${o} %c Fetch failed`,i.error,e),c.error({message:n("errors.fetch_error",{error:e})})}finally{this.loading.all=!1}}):this.initialize()},async fetchProjectById(e){return s.executeRequest("project",`fetch-project-${e}`,async()=>{this.loading.single=!0;try{if(this.projectCache.has(e))return this.currentProject=this.projectCache.get(e),this.currentProject;const r=await w(e);if(r.status===200)return this.currentProject=r.data,this.projectCache.set(e,r.data),r.data;throw new Error(JSON.stringify(r))}catch(r){console.error(`${o} %c Fetch by ID failed`,i.error,r),c.error({message:n("errors.fetch_error",{error:r})})}finally{this.loading.single=!1}})},async createProject(e){return s.executeRequest("project","createProject",async()=>{this.loading.single=!0;try{const r=await P(e);if(r.status===201)return this.projects.push(r.data),await this.refreshData(),r.data;throw new Error(JSON.stringify(r))}catch(r){console.error(`${o} %c Create failed`,i.error,r),c.error({message:n("errors.save_error",{error:r})})}finally{this.loading.single=!1}})},async updateProject(e,r){return s.executeRequest("project",`updateProject-${e}`,async()=>{this.loading.single=!0;try{const t=await m(e,r);if(t.status===200){const a=this.projects.findIndex(u=>u.id===e);return a!==-1&&(this.projects[a]=t.data),this.projectCache.set(e,t.data),t.data}else throw new Error(JSON.stringify(t))}catch(t){console.error(`${o} %c Update failed`,i.error,t),c.error({message:n("errors.save_error",{error:t})})}finally{this.loading.single=!1}})},async addDeelorder(e,r){return s.executeRequest("project",`addDeelorder-${e}`,async()=>{this.loading.single=!0;try{const t=await q(e,r);if(t.status===200){const a=this.projects.findIndex(u=>u.id===e);return a!==-1&&(this.projects[a]=t.data),this.projectCache.set(e,t.data),t.data}else throw new Error(JSON.stringify(t))}catch(t){console.error(`${o} %c Add deelorder failed`,i.error,t),c.error({message:n("errors.save_error",{error:t})})}finally{this.loading.single=!1}})},async removeDeelorder(e,r){return s.executeRequest("project",`removeDeelorder-${e}`,async()=>{this.loading.single=!0;try{const t=await x(e,r);if(t.status===200){const a=this.projects.findIndex(u=>u.id===e);return a!==-1&&(this.projects[a]=t.data),this.projectCache.set(e,t.data),t.data}else throw new Error(JSON.stringify(t))}catch(t){console.error(`${o} %c Remove deelorder failed`,i.error,t),c.error({message:n("errors.save_error",{error:t})})}finally{this.loading.single=!1}})},async deleteProject(e){return s.executeRequest("project",`deleteProject-${e}`,async()=>{this.loading.single=!0;try{await $(e),this.projectCache.delete(e),await this.refreshData()}catch(r){console.error(`${o} %c Delete failed`,i.error,r),c.error({message:n("errors.delete_error",{error:r})})}finally{this.loading.single=!1}})},clearCache(){this.projectCache.clear()}}});export{C as u};
