import{bt as l,aY as h,br as f,bw as p,bx as j,bq as y,aZ as g}from"./index-CRgOuqdl.js";async function u(){const e="projects",t=l.get(e);if(t)return{status:200,data:t};const r=await h.get("https://ashlaydev.com/intal/api/project");return l.set(e,r.data.data,{ttl:2*60*1e3}),{status:r.status,data:r.data.data}}async function w(e){if(!e)throw new Error("ID is required");const t=`project-${e}`,r=l.get(t);if(r)return{status:200,data:r};const a=await h.get(`https://ashlaydev.com/intal/api/project/${e}`);return l.set(t,a.data.data,{ttl:5*60*1e3}),{status:a.status,data:a.data.data}}async function m(e){if(!e.NumberID)throw new Error("NumberID is required");e.ProjectNaam||(e.ProjectNaam=`Temp - ${Math.random().toString(36).slice(2)}`);const t=await h.post("https://ashlaydev.com/intal/api/project",e);return l.clear(),{status:t.status,data:t.data.data}}async function P(e,t){if(!e)throw new Error("ID is required");if(!t)throw new Error("Data is required");const r=await h.patch(`https://ashlaydev.com/intal/api/project/${e}`,t);return{status:r.status,data:r.data.data}}async function $(e){if(!e)throw new Error("ID is required");const t=await h.delete(`https://ashlaydev.com/intal/api/project/${e}`);return l.clear(),{status:t.status,data:t.data.data}}async function q(e,t){if(!e||!t)throw new Error("ProjectId and Deelorder are required");const r=await h.post(`https://ashlaydev.com/intal/api/project/${e}/deelorder`,{deelorder:t});return l.remove(`project-${e}`),{status:r.status,data:r.data.data}}async function x(e,t){if(!e)throw new Error("Project ID is required");if(!t)throw new Error("Deelorder ID is required");const r=await h.delete(`https://ashlaydev.com/intal/api/project/${e}/deelorder/${t}`);return{status:r.status,data:r.data.data}}const n=y.global.t,c=g(),s=j(),o="🏗️ [ProjectStore]",i={request:"color: #2196F3",cache:"color: #4CAF50",error:"color: #F44336",info:"color: #9C27B0"},v=f("project",{state:()=>({projects:[],currentProject:null,loading:{single:!1,all:!1},initialized:!1,projectCache:new Map,initializationPromise:null}),getters:{getProjectById:e=>t=>{if(e.projectCache.has(t))return e.projectCache.get(t);const r=e.projects.find(a=>a.id===t);return r&&e.projectCache.set(t,r),r},getProjectByNumberID:e=>t=>e.projects.find(r=>r.projectnummer===t)},actions:{async initialize(){if(!this.initialized)return this.initializationPromise?this.initializationPromise:(this.initializationPromise=s.executeRequest("project","initialization",async()=>{this.loading.all=!0;try{const e=await u();e.status===200&&(this.projects=e.data),this.initialized=!0}catch(e){throw console.error(`${o} %c Initialization failed`,i.error,e),e}finally{this.initializationPromise=null,this.loading.all=!1}}),this.initializationPromise)},refreshData:p.debounce(async function(){return this.initialized?s.executeRequest("project","refresh",async()=>{const e=await u();e.status===200&&(this.projects=e.data)}):this.initialize()},1e3),async fetchProjects(){return this.initialized?s.executeRequest("project","fetchProjects",async()=>{this.loading.all=!0;try{const e=await u();if(e.status===200)this.projects=e.data;else throw new Error(JSON.stringify(e))}catch(e){console.error(`${o} %c Fetch failed`,i.error,e),c.error({message:n("errors.fetch_error",{error:e})})}finally{this.loading.all=!1}}):this.initialize()},async fetchProjectById(e){return s.executeRequest("project",`fetch-project-${e}`,async()=>{this.loading.single=!0;try{if(this.projectCache.has(e))return this.currentProject=this.projectCache.get(e),this.currentProject;const t=await w(e);if(t.status===200)return this.currentProject=t.data,this.projectCache.set(e,t.data),t.data;throw new Error(JSON.stringify(t))}catch(t){console.error(`${o} %c Fetch by ID failed`,i.error,t),c.error({message:n("errors.fetch_error",{error:t})})}finally{this.loading.single=!1}})},async createProject(e){return s.executeRequest("project","createProject",async()=>{this.loading.single=!0;try{const t=await m(e);if(t.status===201)return this.projects.push(t.data),await this.refreshData(),t.data;throw new Error(JSON.stringify(t))}catch(t){console.error(`${o} %c Create failed`,i.error,t),c.error({message:n("errors.save_error",{error:t})})}finally{this.loading.single=!1}})},async updateProject(e,t){return s.executeRequest("project",`updateProject-${e}`,async()=>{this.loading.single=!0;try{const r=await P(e,t);if(r.status===200){const a=this.projects.findIndex(d=>d.id===e);return a!==-1&&(this.projects[a]=r.data),this.projectCache.set(e,r.data),r.data}else throw new Error(JSON.stringify(r))}catch(r){console.error(`${o} %c Update failed`,i.error,r),c.error({message:n("errors.save_error",{error:r})})}finally{this.loading.single=!1}})},async addDeelorder(e,t){return s.executeRequest("project",`addDeelorder-${e}`,async()=>{this.loading.single=!0;try{const r=await q(e,t);if(r.status===200){const a=this.projects.findIndex(d=>d.id===e);return a!==-1&&(this.projects[a]=r.data),this.projectCache.set(e,r.data),r.data}else throw new Error(JSON.stringify(r))}catch(r){console.error(`${o} %c Add deelorder failed`,i.error,r),c.error({message:n("errors.save_error",{error:r})})}finally{this.loading.single=!1}})},async removeDeelorder(e,t){return s.executeRequest("project",`removeDeelorder-${e}`,async()=>{this.loading.single=!0;try{const r=await x(e,t);if(r.status===200){const a=this.projects.findIndex(d=>d.id===e);return a!==-1&&(this.projects[a]=r.data),this.projectCache.set(e,r.data),r.data}else throw new Error(JSON.stringify(r))}catch(r){console.error(`${o} %c Remove deelorder failed`,i.error,r),c.error({message:n("errors.save_error",{error:r})})}finally{this.loading.single=!1}})},async deleteProject(e){return s.executeRequest("project",`deleteProject-${e}`,async()=>{this.loading.single=!0;try{await $(e),this.projectCache.delete(e),await this.refreshData()}catch(t){console.error(`${o} %c Delete failed`,i.error,t),c.error({message:n("errors.delete_error",{error:t})})}finally{this.loading.single=!1}})},clearCache(){this.projectCache.clear()}}});export{v as u};
