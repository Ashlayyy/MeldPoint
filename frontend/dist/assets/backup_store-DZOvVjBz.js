import{c as f}from"./createVueComponent-CKxNTOnQ.js";import{aY as d,br as k,bq as b,aZ as w}from"./index-5wn-0GR-.js";/**
 * @license @tabler/icons-vue v3.34.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */var D=f("outline","refresh","IconRefresh",[["path",{d:"M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4",key:"svg-0"}],["path",{d:"M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4",key:"svg-1"}]]);const l={log:(...r)=>{},error:(...r)=>{}};function y(r){let e="";return d.post("undefined/backup/create",{},{responseType:"stream",headers:{Accept:"text/event-stream"},onDownloadProgress:t=>{const n=t.event.target.responseText.substring(e.length);e+=n;const s=n.split(`
`);for(const p of s)if(p.startsWith("data: "))try{const u=p.replace("data: ","").trim();if(u){const g=JSON.parse(u);l.log("Parsed progress:",g),r(g)}}catch{}},transformResponse:[t=>t]})}async function O(){try{const r=await d.get("undefined/backup/list");return l.log("List backups response:",r),{status:r.status,data:r.data.data}}catch(r){throw r}}async function v(r){try{const e=await d.get(`undefined/backup/download/${r}`);return l.log("Download backup response:",e),{status:e.status,data:e.data}}catch(e){throw e}}async function P(r){try{const e=await d.delete(`undefined/backup/${r}`);return l.log("Delete backup response:",e),{status:e.status,data:e.data}}catch(e){throw e}}async function B(r){try{const e=await d.post(`undefined/backup/restore/${r}`,{},{responseType:"stream",headers:{Accept:"text/event-stream"}});return l.log("Restore backup response:",e),e}catch(e){throw e}}async function S(r){l.log("Uploading backup file:",r.name);try{const e=new FormData;e.append("backup",r);const t=await d.post("undefined/backup/upload",e,{headers:{"Content-Type":"multipart/form-data"}});return l.log("Upload backup response:",t),{status:t.status,data:t.data}}catch(e){throw e}}const a=b.global.t,c=w(),o={log:(...r)=>{},error:(...r)=>{}},$=k("backup",{state:()=>({backups:[],loading:!1,currentOperation:"",restoreProgress:{status:"",progress:0},createProgress:{status:"",progress:0}}),actions:{async listBackups(){var r,e,t,n;this.loading=!0,this.currentOperation="listing";try{const s=await O();if(o.log("List backups response:",s),s.status===200){try{this.backups=(r=s.data)==null?void 0:r.sort((p,u)=>new Date(u.createdAt).getTime()-new Date(p.createdAt).getTime())}catch{this.backups=[]}o.log("Backups sorted and stored:",this.backups)}else throw new Error(JSON.stringify(s))}catch(s){((e=s.response)==null?void 0:e.status)===404&&((n=(t=s.response)==null?void 0:t.data)==null?void 0:n.error)==="No backups found"?this.backups=[]:c.error({message:a("errors.fetch_error",{error:s})})}finally{this.loading=!1,this.currentOperation=""}},async createBackup(){c.promise({message:a("admin.backup.create_backup")}),this.loading=!0,this.currentOperation="creating",this.createProgress={status:"",progress:0,message:""};try{await y(r=>{this.createProgress={status:r.status,progress:r.progress,message:r.message},r.status==="completed"&&r.backup&&(this.listBackups(),c.resolvePromise({message:a("admin.backup.backup_created")}))})}catch(r){c.rejectPromise({message:a("errors.backup_create_error",{error:r})})}finally{this.loading=!1,this.currentOperation=""}},async downloadBackup(r){if(r){c.promise({message:a("admin.backup.download_backup")}),this.loading=!0,this.currentOperation="downloading";try{const e=await v(r);if(o.log("Download response:",e),e.status===200){const t=new Blob([JSON.stringify(e.data,null,2)],{type:"application/json"}),n=window.URL.createObjectURL(t),s=document.createElement("a");s.href=n,s.download=`backup-${r}.json`,document.body.appendChild(s),s.click(),window.URL.revokeObjectURL(n),document.body.removeChild(s),o.log("Download completed successfully"),c.resolvePromise({message:a("admin.backup.download_success")})}else throw new Error(JSON.stringify(e))}catch(e){c.rejectPromise({message:a("errors.fetch_error",{error:e})})}finally{this.loading=!1,this.currentOperation=""}}},async deleteBackup(r){if(r){c.promise({message:a("admin.backup.delete_backup")}),this.loading=!0,this.currentOperation="deleting";try{const e=await P(r);if(o.log("Delete response:",e),e.status===200)c.resolvePromise({message:a("admin.backup.delete_success")}),await this.listBackups();else throw new Error(JSON.stringify(e))}catch(e){c.rejectPromise({message:a("errors.delete_error",{error:e})})}finally{this.loading=!1,this.currentOperation=""}}},async restoreBackup(r){var e,t;if(r){this.loading=!0,this.currentOperation="restoring",this.restoreProgress={status:"",progress:0};try{c.promise({message:a("admin.backup.restore_backup")});const n=await B(r);o.log("Restore initial response:",n);const s=(t=(e=n.data)==null?void 0:e.body)==null?void 0:t.getReader();if(!s)throw new Error("No response stream available");for(o.log("Starting to read restore stream...");;){const{done:p,value:u}=await s.read();if(p){o.log("Restore stream reading completed");break}const g=new TextDecoder().decode(u);o.log("Received restore chunk:",g);const m=g.split(`
`).filter(h=>h.trim());for(const h of m)try{const i=JSON.parse(h);if(o.log("Parsed restore update:",i),i.status&&typeof i.progress=="number"&&(this.restoreProgress={status:a(`admin.backup.restore_status.${i.status}`),progress:i.progress},o.log("Restore progress updated:",this.restoreProgress)),i.error)throw o.error("Error in restore update:",i.error),new Error(i.error);if(i.status==="completed"){o.log("Restore completed successfully"),c.resolvePromise({message:a("admin.backup.restore_success")}),setTimeout(()=>{window.location.reload()},2e3);return}}catch(i){o.error("Failed to parse restore progress update:",i),console.error("Failed to parse progress update:",i)}}}catch(n){c.rejectPromise({message:a("errors.restore_error",{error:n})})}finally{this.loading=!1,this.currentOperation=""}}}}});export{D as I,S as U,$ as u};
